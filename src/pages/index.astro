---
import Layout from '../layouts/Layout.astro';
import CyberBackground from '../components/CyberBackground.astro';
import Header from '../components/Header.astro';
import Hero from '../components/Hero.astro';
import About from '../components/About.astro';
import Experience from '../components/Experience.astro';
import Projects from '../components/Projects.astro';
import Skills from '../components/Skills.astro';
import Contact from '../components/Contact.astro';

import enTranslations from '../i18n/en.json';
import esTranslations from '../i18n/es.json';

const translations = {
  en: enTranslations,
  es: esTranslations
};
---

<Layout title="Arturo Zvezda - Full-stack Software Engineer">
  <CyberBackground />
  <div id="app" data-lang="en" class="relative z-10">
    <Header t={translations.en} />
    <main>
      <Hero t={translations.en} />
      <About t={translations.en} />
      <Experience t={translations.en} />
      <Projects t={translations.en} />
      <Skills t={translations.en} />
      <Contact t={translations.en} />
    </main>

    <footer class="relative bg-[#01012b]/80 border-t-2 border-cyan-400/30 text-gray-400 py-8 backdrop-blur-sm">
      <div class="container mx-auto px-4 text-center">
        <p id="footer-rights" class="text-cyan-300 font-medium">© 2024 Arturo Zvezda {translations.en.footer.rights}</p>
        <p id="footer-made" class="text-sm mt-2 text-gray-500">{translations.en.footer.made}</p>
        <div class="mt-4 flex justify-center gap-2">
          <div class="w-2 h-2 bg-cyan-400 rounded-full animate-pulse"></div>
          <div class="w-2 h-2 bg-pink-500 rounded-full animate-pulse" style="animation-delay: 0.5s;"></div>
          <div class="w-2 h-2 bg-purple-400 rounded-full animate-pulse" style="animation-delay: 1s;"></div>
        </div>
      </div>
    </footer>
  </div>

  <script define:vars={{ translations }}>
    let currentLang = 'en';

    function updateContent(lang) {
      const t = translations[lang];
      currentLang = lang;
      document.getElementById('app').dataset.lang = lang;

      // Update all language toggle buttons
      document.querySelectorAll('.lang-text').forEach(el => {
        el.textContent = lang === 'en' ? 'ES' : 'EN';
      });

      // Update nav
      const navLinks = document.querySelectorAll('nav a');
      navLinks[0].textContent = t.nav.about;
      navLinks[1].textContent = t.nav.experience;
      navLinks[2].textContent = t.nav.projects;
      navLinks[3].textContent = t.nav.skills;
      navLinks[4].textContent = t.nav.contact;

      // Update hero
      document.querySelector('h2').textContent = t.hero.title;
      document.querySelectorAll('section p')[0].textContent = t.hero.subtitle;
      document.querySelectorAll('section p')[1].textContent = t.hero.description;
      document.querySelector('a[href="#contact"]').textContent = t.hero.cta;

      // Update about
      document.querySelectorAll('h2')[1].textContent = t.about.title;
      document.querySelector('#about p').textContent = t.about.text;

      // Update experience
      document.querySelectorAll('h2')[2].textContent = t.experience.title;
      const jobs = document.querySelectorAll('#experience > div > div > div');
      jobs.forEach((job, i) => {
        const jobData = t.experience.jobs[i];
        job.querySelector('h3').textContent = jobData.company;
        job.querySelector('h4').textContent = jobData.role;
        job.querySelector('span').textContent = jobData.period;
        job.querySelector('p').textContent = jobData.description;
      });

      // Update projects - Note: Projects are complex and handled on page load
      // For simplicity, we'll just update titles
      document.querySelectorAll('h2')[3].textContent = t.projects.title;

      // Update skills
      document.querySelectorAll('h2')[4].textContent = t.skills.title;

      // Update contact
      document.querySelectorAll('h2')[5].textContent = t.contact.title;
      document.querySelector('#contact > div > p').textContent = t.contact.subtitle;
      document.querySelector('#contact span').textContent = t.contact.location;

      const contactBtns = document.querySelectorAll('#contact a');
      contactBtns[0].childNodes[contactBtns[0].childNodes.length - 1].textContent = t.contact.buttons.whatsapp;
      contactBtns[1].childNodes[contactBtns[1].childNodes.length - 1].textContent = t.contact.buttons.email;
      contactBtns[2].childNodes[contactBtns[2].childNodes.length - 1].textContent = t.contact.buttons.linkedin;

      // Update footer
      document.getElementById('footer-rights').innerHTML = `© 2024 Arturo Zvezda. ${t.footer.rights}`;
      document.getElementById('footer-made').textContent = t.footer.made;
    }

    // Language toggle for both mobile and desktop
    document.getElementById('lang-toggle-desktop')?.addEventListener('click', () => {
      const newLang = currentLang === 'en' ? 'es' : 'en';
      updateContent(newLang);
    });

    document.getElementById('lang-toggle-mobile')?.addEventListener('click', () => {
      const newLang = currentLang === 'en' ? 'es' : 'en';
      updateContent(newLang);
    });

    // Mobile menu toggle
    document.getElementById('mobile-menu-toggle')?.addEventListener('click', () => {
      document.getElementById('mobile-menu')?.classList.toggle('hidden');
    });

    // Close mobile menu on link click
    document.querySelectorAll('#mobile-menu a').forEach(link => {
      link.addEventListener('click', () => {
        document.getElementById('mobile-menu')?.classList.add('hidden');
      });
    });

    // Parallax and scroll animations
    let ticking = false;

    function updateParallax() {
      const scrolled = window.pageYOffset;

      // Parallax effect for background elements
      const parallaxElements = document.querySelectorAll('.float, .cyber-grid');
      parallaxElements.forEach((el, index) => {
        const speed = 0.1 + (index * 0.05);
        const yPos = -(scrolled * speed);
        el.style.transform = `translateY(${yPos}px)`;
      });

      ticking = false;
    }

    function requestParallaxUpdate() {
      if (!ticking) {
        window.requestAnimationFrame(updateParallax);
        ticking = true;
      }
    }

    // Scroll reveal animations
    const observerOptions = {
      threshold: 0.1,
      rootMargin: '0px 0px -50px 0px'
    };

    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add('fade-in-up');
          observer.unobserve(entry.target);
        }
      });
    }, observerOptions);

    // Observe sections for fade-in animations
    document.querySelectorAll('section > div').forEach(el => {
      if (!el.classList.contains('fade-in-up')) {
        observer.observe(el);
      }
    });

    // Smooth scroll for anchor links
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
      anchor.addEventListener('click', function (e) {
        e.preventDefault();
        const target = document.querySelector(this.getAttribute('href'));
        if (target) {
          target.scrollIntoView({
            behavior: 'smooth',
            block: 'start'
          });
        }
      });
    });

    // Scroll event listener for parallax
    window.addEventListener('scroll', requestParallaxUpdate, { passive: true });

    // Add glitch effect to title on hover
    const title = document.querySelector('h1');
    if (title) {
      let glitchInterval;
      title.addEventListener('mouseenter', () => {
        let count = 0;
        glitchInterval = setInterval(() => {
          title.classList.toggle('glitch');
          count++;
          if (count >= 6) {
            clearInterval(glitchInterval);
            title.classList.remove('glitch');
          }
        }, 100);
      });
    }

    // Cursor trail effect (cyberpunk cursor)
    let cursorTrail = [];
    const maxTrailLength = 10;

    document.addEventListener('mousemove', (e) => {
      if (window.innerWidth > 768) { // Only on desktop
        const trail = document.createElement('div');
        trail.className = 'cursor-trail';
        trail.style.cssText = `
          position: fixed;
          left: ${e.clientX}px;
          top: ${e.clientY}px;
          width: 4px;
          height: 4px;
          background: linear-gradient(45deg, #05d9e8, #ff2a6d);
          border-radius: 50%;
          pointer-events: none;
          z-index: 9999;
          opacity: 0.7;
          animation: fadeOut 0.5s forwards;
        `;
        document.body.appendChild(trail);

        cursorTrail.push(trail);
        if (cursorTrail.length > maxTrailLength) {
          const old = cursorTrail.shift();
          old.remove();
        }

        setTimeout(() => trail.remove(), 500);
      }
    });

    // Add fadeOut animation
    const style = document.createElement('style');
    style.textContent = `
      @keyframes fadeOut {
        to {
          opacity: 0;
          transform: scale(0);
        }
      }
    `;
    document.head.appendChild(style);
  </script>
</Layout>
